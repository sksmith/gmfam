name: Deploy to AWS Lightsail

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: "1.21"
  APP_NAME: "gmfam"

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies and generate code
      run: |
        go mod download
        # Install ent code generator if needed
        go install entgo.io/ent/cmd/ent@latest
        # Generate ent code (if not already generated)
        go generate ./...

    - name: Run tests
      run: go test ./...

    - name: Build application
      run: |
        # Build with all dependencies embedded
        CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -tags production -ldflags="-s -w" -o ${{ env.APP_NAME }} ./cmd/web
        chmod +x ${{ env.APP_NAME }}

    - name: Create deployment package
      run: |
        mkdir -p deploy
        cp ${{ env.APP_NAME }} deploy/
        cp -r public deploy/ 2>/dev/null || true
        cp -r static deploy/ 2>/dev/null || true
        cp config/config.yaml deploy/ 2>/dev/null || true
        
        # Create systemd service file
        cat > deploy/${{ env.APP_NAME }}.service << EOF
        [Unit]
        Description=${{ env.APP_NAME }} web application
        After=network.target

        [Service]
        Type=simple
        User=ubuntu
        WorkingDirectory=/opt/${{ env.APP_NAME }}
        ExecStart=/opt/${{ env.APP_NAME }}/${{ env.APP_NAME }}
        Restart=always
        RestartSec=5
        Environment=PAGODA_APP_ENVIRONMENT=production
        Environment=PAGODA_HTTP_PORT=8000
        Environment=PAGODA_APP_HOST=${{ secrets.APP_HOST }}
        Environment=PAGODA_ORM_AUTO_MIGRATE=false

        [Install]
        WantedBy=multi-user.target
        EOF
        
        # Create deployment script
        cat > deploy/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        APP_NAME=$1
        DEPLOY_DIR="/opt/$APP_NAME"
        
        echo "Starting deployment of $APP_NAME..."
        
        # Stop the service if it's running
        sudo systemctl stop $APP_NAME || true
        
        # Create application directory
        sudo mkdir -p $DEPLOY_DIR
        sudo mkdir -p $DEPLOY_DIR/dbs
        
        # Copy application files
        sudo cp /tmp/$APP_NAME $DEPLOY_DIR/
        sudo cp -r /tmp/public $DEPLOY_DIR/ 2>/dev/null || true
        sudo cp -r /tmp/static $DEPLOY_DIR/ 2>/dev/null || true
        sudo cp /tmp/config.yaml $DEPLOY_DIR/ 2>/dev/null || true
        
        # Set ownership
        sudo chown -R ubuntu:ubuntu $DEPLOY_DIR
        
        # Install systemd service
        sudo cp /tmp/$APP_NAME.service /etc/systemd/system/
        sudo systemctl daemon-reload
        sudo systemctl enable $APP_NAME
        
        # Start the service
        sudo systemctl start $APP_NAME
        
        # Wait a moment and check status
        sleep 5
        sudo systemctl status $APP_NAME --no-pager || true
        
        echo "Deployment completed successfully!"
        EOF
        
        chmod +x deploy/deploy.sh

    - name: Upload files to Lightsail
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.LIGHTSAIL_HOST }}
        username: ${{ secrets.LIGHTSAIL_USER }}
        key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
        port: 22
        source: "deploy/*"
        target: "/tmp/"
        strip_components: 1

    - name: Execute deployment script
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.LIGHTSAIL_HOST }}
        username: ${{ secrets.LIGHTSAIL_USER }}
        key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 10m
        script: |
          # List files to debug
          echo "Files in /tmp:"
          ls -la /tmp/
          
          # Make sure deploy.sh is executable and run it
          chmod +x /tmp/deploy.sh
          /tmp/deploy.sh ${{ env.APP_NAME }}
          
          # Clean up
          rm -f /tmp/deploy.sh /tmp/${{ env.APP_NAME }} /tmp/${{ env.APP_NAME }}.service
          rm -rf /tmp/public /tmp/static
          rm -f /tmp/config.yaml

    - name: Health check
      run: |
        sleep 10
        curl -f http://${{ secrets.LIGHTSAIL_HOST }}:8000/ || echo "Health check failed, but deployment may still be successful"