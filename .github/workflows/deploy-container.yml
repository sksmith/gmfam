name: Deploy to AWS Lightsail Container Service

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: "1.24"
  APP_NAME: "gmfam"

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies and generate code
      run: |
        go mod download
        go install entgo.io/ent/cmd/ent@latest
        go generate ./...

    - name: Run tests
      env:
        SKIP_DB_TESTS: "true"
      run: make test

    - name: Build application (validation)
      run: |
        CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -tags production -ldflags="-s -w" -o ${{ env.APP_NAME }} ./cmd/web

  deploy:
    runs-on: ubuntu-latest
    needs: integration
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ARN_OIDC_ACCESS }}
        role-session-name: Github-${{ github.run_number }}
        aws-region: us-east-1
        audience: sts.amazonaws.com

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Extract just the repository name from the full URI
        REPO_NAME=$(echo $ECR_REPOSITORY | cut -d'/' -f2)
        
        echo "Building Docker image..."
        docker build -t $ECR_REGISTRY/$REPO_NAME:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$REPO_NAME:latest .
        
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$REPO_NAME:$IMAGE_TAG
        docker push $ECR_REGISTRY/$REPO_NAME:latest
        
        echo "IMAGE_URI=$ECR_REGISTRY/$REPO_NAME:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Deploy to Lightsail Container Service
      env:
        LIGHTSAIL_SERVICE_NAME: ${{ secrets.LIGHTSAIL_SERVICE_NAME }}
        IMAGE_URI: ${{ env.IMAGE_URI }}
      run: |
        echo "Deploying to Lightsail container service..."
        
        # Create container deployment
        aws lightsail create-container-service-deployment \
          --service-name $LIGHTSAIL_SERVICE_NAME \
          --containers "{
            \"${{ env.APP_NAME }}\": {
              \"image\": \"$IMAGE_URI\",
              \"environment\": {
                \"PAGODA_APP_ENVIRONMENT\": \"production\",
                \"PAGODA_HTTP_PORT\": \"8000\",
                \"PAGODA_APP_HOST\": \"${{ secrets.PAGODA_APP_HOST }}\",
                \"PAGODA_DATABASE_DRIVER\": \"postgres\",
                \"PAGODA_DATABASE_CONNECTION\": \"${{ secrets.PAGODA_DATABASE_CONNECTION }}\",
                \"PAGODA_ORM_AUTO_MIGRATE\": \"true\",
                \"PAGODA_APP_ENCRYPTIONKEY\": \"${{ secrets.PAGODA_APP_ENCRYPTIONKEY }}\",
                \"PAGODA_MAIL_HOSTNAME\": \"${{ secrets.PAGODA_MAIL_HOSTNAME }}\",
                \"PAGODA_MAIL_PORT\": \"${{ secrets.PAGODA_MAIL_PORT }}\",
                \"PAGODA_MAIL_USER\": \"${{ secrets.PAGODA_MAIL_USER }}\",
                \"PAGODA_MAIL_PASSWORD\": \"${{ secrets.PAGODA_MAIL_PASSWORD }}\",
                \"PAGODA_MAIL_FROMADDRESS\": \"${{ secrets.PAGODA_MAIL_FROMADDRESS }}\",
                \"VERSION\": \"${{ github.run_number }}\"
              },
              \"ports\": {
                \"8000\": \"HTTP\"
              }
            }
          }" \
          --public-endpoint "{
            \"containerName\": \"${{ env.APP_NAME }}\",
            \"containerPort\": 8000,
            \"healthCheck\": {
              \"path\": \"/\",
              \"intervalSeconds\": 30,
              \"timeoutSeconds\": 10,
              \"unhealthyThreshold\": 5,
              \"healthyThreshold\": 2
            }
          }"

    - name: Wait for deployment to complete
      env:
        LIGHTSAIL_SERVICE_NAME: ${{ secrets.LIGHTSAIL_SERVICE_NAME }}
      run: |
        echo "Waiting for deployment to complete..."
        
        # Wait for deployment to be active (extended for database migrations)
        max_attempts=40
        attempt=0
        
        while [ $attempt -lt $max_attempts ]; do
          state=$(aws lightsail get-container-services \
            --service-name $LIGHTSAIL_SERVICE_NAME \
            --query 'containerServices[0].currentDeployment.state' \
            --output text 2>/dev/null || echo "PENDING")
          
          echo "Deployment state: $state"
          
          if [ "$state" = "ACTIVE" ]; then
            echo "✅ Deployment completed successfully!"
            break
          elif [ "$state" = "FAILED" ]; then
            echo "❌ Deployment failed!"
            exit 1
          else
            echo "⏳ Deployment in progress..."
            sleep 30
            ((attempt++))
          fi
        done
        
        if [ $attempt -eq $max_attempts ]; then
          echo "⚠️ Deployment is taking longer than expected"
          echo "Check status at: https://lightsail.aws.amazon.com/"
        fi

    - name: Get application URL
      env:
        LIGHTSAIL_SERVICE_NAME: ${{ secrets.LIGHTSAIL_SERVICE_NAME }}
      run: |
        # Get the service URL
        SERVICE_URL=$(aws lightsail get-container-services \
          --service-name $LIGHTSAIL_SERVICE_NAME \
          --query 'containerServices[0].url' \
          --output text 2>/dev/null || echo "")
        
        if [ -n "$SERVICE_URL" ] && [ "$SERVICE_URL" != "None" ]; then
          echo "🌐 Application is available at: $SERVICE_URL"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
        else
          echo "⚠️ Service URL not yet available. Check Lightsail console."
        fi

    - name: Health check with retry logic
      env:
        SERVICE_URL: ${{ env.SERVICE_URL }}
      run: |
        if [ -n "$SERVICE_URL" ] && [ "$SERVICE_URL" != "None" ]; then
          echo "Starting health check..."
          MAX_ATTEMPTS=10
          RETRY_INTERVAL=30
          
          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "Health check attempt $i/$MAX_ATTEMPTS..."
            
            if curl -f --max-time 10 --retry 3 --retry-delay 2 "$SERVICE_URL"; then
              echo "✅ Health check passed on attempt $i"
              echo "🚀 Deployment completed successfully!"
              echo "Application is available at: $SERVICE_URL"
              exit 0
            else
              echo "❌ Health check failed on attempt $i"
              if [ $i -lt $MAX_ATTEMPTS ]; then
                echo "Waiting ${RETRY_INTERVAL}s before next attempt..."
                sleep $RETRY_INTERVAL
              fi
            fi
          done
          
          echo "🚨 Health check failed after $MAX_ATTEMPTS attempts"
          echo "Check application logs in Lightsail console"
          exit 1
        else
          echo "⚠️ Skipping health check - service URL not available yet"
        fi

    - name: Deployment summary
      if: always()
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Application**: ${{ env.APP_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Run Number**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Service**: ${{ secrets.LIGHTSAIL_SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "- **Status**: ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          if [ -n "$SERVICE_URL" ] && [ "$SERVICE_URL" != "None" ]; then
            echo "- **URL**: $SERVICE_URL" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "- **Status**: ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
        fi